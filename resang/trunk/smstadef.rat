
include "ascii.inc"         
include "bbctl.inc"         
include "bbcode.inc"         
include "macros.inc"   
include "bbsta.inc"
include "smcode.inc"         

define(BBImplicit, Implicit None)
undefine read
undefine write

define($DEBUG,#)

Subroutine stadef_load	# Process Station definition file
BBcommon
Status$Common

external scopy
integer name_len
integer return_val
integer k, kk
integer lenline
character file_name[50]
vmschar*50 file_name_v
equivalence(file_name, file_name_v)
character at_rcd[400]
vmschar*400  at_rcd_v
equivalence(at_rcd, at_rcd_v)
integer ipos, isize
integer getwrd, equal_HV, ctoi
character keyword[80]
character mystanum[80]
character myro[80]
character myside[80]
character myview[80]
character myip[80]
character myastabs[80]
integer ista, iastabs, iview
integer i

#Initialize station definitions
for (i = 1; i <= STA$slots; i = i + 1)
{
	kk = 0; call smov(EOS, staro[1,i],    kk)
	kk = 0; call smov(EOS, staside[1,i],  kk)
	kk = 0; call smov(EOS, staview[1,i],  kk)
	kk = 0; call smov(EOS, staip[1,i],    kk)
	kk = 0; call smov(EOS, staastabs[1,i], kk)
}

# Open station definition file
name_len = 0
call smovv  ("stadef.dat", file_name, name_len)
call smov   (EOS, file_name, name_len)
open(unit    =   10,                            #open input file
    file    =   file_name_v,
    status  =  'old',
    access  =  'sequential',
    recl    =   120,
    iostat  =   return_val)

if (return_val != 0)
{
    print *, "unable to open stastart.dat"
    return
}

# Process each line in station definition file
repeat
{
    #$% get line of input from resa formatted station definitions
    read (10,9001,END=8000) at_rcd_v
    lenline = len_trim(at_rcd_v)
9001    format(a)
    k = lenline
    call smov (EOS, at_rcd, k)

	# Skip lines with leading #
    ipos = 1        
    call skipbl (at_rcd, ipos)
    if (at_rcd[ipos] == $POUND) next

	call echoh( at_rcd, k)
	call echor

	# Skip lines with leading !
    ipos = 1        
    call skipbl (at_rcd, ipos)
    if (at_rcd[ipos] == $EXCLAIM) next

    call upper (at_rcd)

	# Get station number
    isize = getwrd (at_rcd, ipos, mystanum)
	kk = 1
	ista = ctoi(mystanum, kk)
	if (ista < 0 | ista > STA$slots)
	{
    	print *, ista, " station out of range."
    	next
	}
	
	# Get optional readonly flag and player side
    isize = getwrd (at_rcd, ipos, myro)
	if (equal_HV(myro, "R") == NO)
	{
		call scopy(myro, 1, myside, 1)
		kk = 0
		call smov(EOS, myro, kk)
	}
	else
	{
		isize = getwrd (at_rcd, ipos, myside)
	}

	# Validate player side
	if (equal_HV(myside, "T") == YES | 
        equal_HV(myside, "C") == YES |
        equal_HV(myside, "B") == YES |
        equal_HV(myside, "O") == YES |
        equal_HV(myside, "N") == YES)
	{
		k = 0 # non empty
	}
	else
	{
		print *, myside, " is invalid side(T,C,B,O,N)"
	}

	# Get optional player view
	if (equal_HV(myside, "T") == YES |
        equal_HV(myside, "C") == YES | 
        equal_HV(myside, "N") == YES)
	{
		kk = 0
		call smov(EOS, myview, kk)
	}
	else
	{
		isize = getwrd (at_rcd, ipos, myview)

		# Validate player view
        kk = 1
        k = ctoi (myview,kk)

        if (equal_HV(myside, "B") == YES)
        {
            iview = $FirstBlue$View - 1 + k

            if      (iview > $LastBlue$View  ) iview = 0
            else if (iview < $FirstBlue$View ) iview = 0

			if (iview == 0)
			{
				print *, myview, " blue view is out of bounds for game"
			}
        }
        else 
        {
            iview = $FirstOrange$View - 1 + k

            if      (iview > $LastOrange$view ) iview = 0
            else if (iview < $FirstOrange$View) iview = 0
			if (iview == 0)
			{
				print *, myview, " orange view is out of bounds for game"
			}
        }		
	}

	# Get workstation IP address
    isize = getwrd (at_rcd, ipos, myip)

	# Get number of automatic status boards (1-6)
    isize = getwrd (at_rcd, ipos, myastabs)

	# Validate number of player astabs
	kk = 1
	iastabs = ctoi(myastabs, kk)
	if (iastabs < 1 | iastabs > 6)
	{
		print *, myastabs, " is invalid number of astabs(1-6)"
	}	

	# Save station definition in common	
	call scopy(myro,     1, sta_ro[ista],     1)
	call scopy(myside,   1, sta_side[ista],   1)
	call scopy(myview,   1, sta_view[ista],   1)
	call scopy(myip,     1, sta_ip[ista],     1)
	call scopy(myastabs, 1, sta_astabs[ista], 1)

}
8000


close(10)
return
end
